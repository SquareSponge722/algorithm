#include <bits/stdc++.h>

using namespace std;

const int N = 8;
const int M = 1000000 + 5;
const int mod = 1e9 + 7;

long long good[1<<N][1<<N];
long long I[1<<N][1<<N];
long long cpy2[1<<N][1<<N];
long long ans[1<<N];
long long cpy1[1<<N];

int main() {
	freopen("game.in", "r", stdin);
	freopen("game.out", "w", stdout);
	int n, m;
	scanf("%d %d", &n, &m);
	int all = (1 << n) - 1;
	int cnt = 0;
	for (int i = 0; i <= all; i++) {
		for (int j = 0; j <= all; j++) {
			int ok = 1;
			for (int k = 1; k < n; k++) {
				if (((i >> k) & 1) < ((j >> (k-1)) & 1)) {
					ok = 0;	
					break;
				}
			}
			good[i][j] = ok;
			cnt += ok;
		}
	}
	for (int i = 0; i <= all; i++) {
		I[i][i] = 1;
	}
	m--;
	for (; m > 0; m >>= 1) {
		if (m & 1) {
			memset(cpy2, 0, sizeof cpy2);
			for (int i = 0; i <= all; i++) {
				for (int j = 0; j <= all; j++) {
					for (int k = 0; k <= all; k++) {
						(cpy2[i][j] += I[i][k] * good[k][j]) %= mod;
					}
				}
			}
			for (int i = 0; i <= all; i++) {
				for (int j = 0; j <= all; j++) {
					I[i][j] = cpy2[i][j];
				}
			}
		}
		memset(cpy2, 0, sizeof cpy2);
		for (int i = 0; i <= all; i++) {
			for (int j = 0; j <= all; j++) {
				for (int k = 0; k <= all; k++) {
					(cpy2[i][j] += good[i][k] * good[k][j]) %= mod;
				}
			}
		}
		for (int i = 0; i <= all; i++) {
			for (int j = 0; j <= all; j++) {
				good[i][j] = cpy2[i][j];
			}
		}
	}
	for (int i = 0; i <= all; i++) {
		cpy1[i] = 1;
	}
	for (int i = 0; i <= all; i++) {
		for (int j = 0; j <= all; j++) {
			(ans[i] += cpy1[j] * I[j][i]) %= mod;
	 	}
	}
	long long sum = 0;
	for (int i = 0; i <= all; i++) {
		(sum += ans[i]) %= mod;
	}
	printf("%lld\n", sum);
	return 0;
}

/*
00
00

00
01

00
10

00
11

01
00 x

01
01 x

01
10 

01
11 

10
00

10
01

10
10

10
11 

11
00 x

11
01 x

11
10

11
11
*/
