#include <cstdio>
#include <vector>
#include <cstring>
#include <iostream>
using namespace std;
typedef long long ll;
const ll INF = 0x3f3f3f3f3f3f3f3f;
void read(int &x) {
	static char buf = getchar(); register int f = 1; x = 0;
	for (; !isdigit(buf); buf = getchar()) if (buf == '-') f = -1;
	for (;  isdigit(buf); buf = getchar()) x = x * 10 + buf - 48; x *= f;
}
const int N = 1e5 + 10;
vector<int> edge[N];
int val[N], n, m;
ll f[N][2];
char opt[5];

void init() {
	scanf("%d %d %s", &n, &m, &opt[1]);
	for (int i = 1; i <= n; ++i) read(val[i]);
	for (int i = 1, u, v; i < n; ++i) {	
		read(u), read(v);
		edge[u].push_back(v);
		edge[v].push_back(u);
	}
}

namespace condition_small {
	void dfs(int u, int f) {
		if (u != 1 && edge[u].size() == 1) {
			f[u] = 0, f[u][1] = val[u];
			return;
		}
		for (int i = 0; i < edge[u].size(); ++i) {
			int v = edge[u][i];
			if (v == f) continue;
			if (f[v][0] == INF) dfs(v, u);
			if (f[v][1] == INF) dfs(v, u);
		}
		ll sum = 0;
		for (int i = 0; i < edge[u].size(); ++i) {
			int v = edge[u][i];
			if (v == f) continue;
			sum += min(f[v][0], f[v][1]);
		}
		f[u][1] = sum + val[u];
		for (int i = 0; i < edge[u].size(); ++i) {
			int v = edge[u][i];
			if (v == f) continue;
			f[u][0] = min(f[u][0], f[v][1] + sum - min(f[v][0], f[v][1]));
		}
	}
	
	int main() {
		memset(f, 0x3f, sizeof f);
		while (m--) {
			int a, x, b, y;
			read(a), read(x), read(b), read(y);
			dfs(1, -1), dfs(1, -1);
			printf("%lld\n", min(f[1][0], f[1][1]));
		}
		return 0;
	}
}

namespace condition_A {
	int main() {
		return 0;
	}
}

namespace condition_1 {
	int main() {
		return 0;
	}
}

int main() {
	init();
	if (n <= 5000 && m <= 5000) condition_small::main(); else
	if (opt[1] == 'A') condition_A::main(); else
	if (opt[2] == '1') condition_1::main();
	return 0;
}
